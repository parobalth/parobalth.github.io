<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Parobalth</title><link href="parobalth.github.io/" rel="alternate"></link><link href="parobalth.github.io/feeds/computer.atom.xml" rel="self"></link><id>parobalth.github.io/</id><updated>2016-03-06T00:00:00+01:00</updated><entry><title>Vim: Run current line</title><link href="parobalth.github.io/vim-run-line" rel="alternate"></link><updated>2016-03-06T00:00:00+01:00</updated><author><name>Parobalth</name></author><id>tag:,2016-03-06:parobalth.github.io/vim-run-line</id><summary type="html">&lt;p&gt;A few days ago I wrote a post how to save history commands to a file. I tinkered with my notes file and wondered how to run the current line in bash. I found multiple solutions but all replaced the current line with the output of the command. Although this can be useful it did not help me. It frustrated me that I could not find a proper solution. I don&amp;#8217;t consider myself a vim beginner anymore and somehow I felt stupid. From vimtutor I remebered &lt;code&gt;!&lt;/code&gt; to run external commands. I even looked it up in vimtutor but I could only find &lt;code&gt;:r !date&lt;/code&gt;. 
The following example runs the current line and replaces it with the&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:. !bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the current line is represented by a dot. You can declare a range with &lt;code&gt;1,5&lt;/code&gt; (line 1 to 5) or &lt;code&gt;.,$&lt;/code&gt; (current line to end of file). You can also use a line number (e.g. &amp;#8220;:5&amp;nbsp;!bash&amp;#8221;). &lt;/p&gt;
&lt;p&gt;Some screenshots for clarification where I&amp;#8217;m running line number&amp;nbsp;1:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scr1" src="./images/vimscr1.png" /&gt;
Hit &lt;code&gt;Enter&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scr2" src="./images/vimscr2.png" /&gt;
Line number 1 is replaced by the output of the fortune&amp;nbsp;command.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;a class="headerlink" href="#solution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:.w !bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;a href="http://stackoverflow.com/questions/7867356/piping-buffer-to-external-command-in-vim"&gt;stackoverflow-link&lt;/a&gt; finally offered the above&amp;nbsp;solution. &lt;/p&gt;
&lt;p&gt;Again some screenshots for&amp;nbsp;clarification:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scr3" src="./images/vimscr3.png" /&gt;
Hit &lt;code&gt;Enter&lt;/code&gt; to execute chosen&amp;nbsp;line:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scr4" src="./images/vimscr4.png" /&gt;
Hit &lt;code&gt;Enter&lt;/code&gt; to get back to your unmodified vim&amp;nbsp;buffer:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scr5" src="./images/vimscr5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note that you can also use &lt;code&gt;!sh&lt;/code&gt; instead of &lt;code&gt;!bash&lt;/code&gt; to type less and that all examples also work in visual&amp;nbsp;mode. &lt;/p&gt;
&lt;h2 id="vim-help"&gt;Vim help&lt;a class="headerlink" href="#vim-help" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Read the vim&amp;nbsp;help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:help w_c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copyheart:
&lt;a href="http://copyheart.org"&gt;♡&lt;/a&gt;2016 by Parobalth. Copying is an act of love, please&amp;nbsp;share.&lt;/p&gt;</summary><category term="bash"></category><category term="commandline"></category><category term="vim"></category></entry><entry><title>Note your last command</title><link href="parobalth.github.io/ncmd" rel="alternate"></link><updated>2016-02-17T21:06:00+01:00</updated><author><name>Parobalth</name></author><id>tag:,2016-02-16:parobalth.github.io/ncmd</id><summary type="html">&lt;p&gt;Some time ago I started to append neat commands I don&amp;#8217;t want to forget to a file in my home directory (e.g &lt;code&gt;echo 'foo' &amp;gt;&amp;gt; ~/commands.txt&lt;/code&gt;). So I had to navigate to a previous command with &lt;code&gt;CTRL-p&lt;/code&gt;, add &amp;#8220;echo&amp;#8221;, wrap it in singlequotes and add the path to my notes file. Quite a long process to append one command to a file. I already knew that &lt;code&gt;!!&lt;/code&gt; repeats the last command but not how to get it into a file instead of being executed. Actually it works quite simple with &lt;code&gt;echo "!!" &amp;gt;&amp;gt; ~/commands.txt&lt;/code&gt; (which appends your last command to the file &amp;#8216;commands.txt&amp;#8217; in your home directory). I still wanted an easier solution so I created the following bash alias to save me some typing and to be less distraction from the actual task I&amp;#8217;m trying to get&amp;nbsp;done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ncmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo $1 &amp;gt;&amp;gt; ~/commands.md&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I added the above line to my &amp;#8220;~/.bash_aliases&amp;#8221; file and&amp;nbsp;ran &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;. .bash_aliases
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to source it. Then I started to test the above solution and noticed issues with complex arguments and wildcards. I also read that it&amp;#8217;s not recommended to use variables in bash aliases. So I searched for a proper solution and learned quite a lot about bash syntax and how to define&amp;nbsp;functions. &lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;a class="headerlink" href="#solution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My final solution is the following function in my .bashrc&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nn &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/commands.txt
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="the-power-of-history-expansion"&gt;The power of history expansion&lt;a class="headerlink" href="#the-power-of-history-expansion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you can use all the power of history expansion as an argument to the function &lt;code&gt;nn&lt;/code&gt;. For example &lt;code&gt;nn "!!"&lt;/code&gt; appends the last command, &lt;code&gt;nn "!-5"&lt;/code&gt; appends the 5th last, &lt;code&gt;nn "!100"&lt;/code&gt; the 100th command in your history file, &lt;code&gt;nn "!ssh"&lt;/code&gt; appends the first command with ssh in it. Read &lt;code&gt;man history&lt;/code&gt; for further examples. Double quotes are&amp;nbsp;mandatory. &lt;/p&gt;
&lt;p&gt;You can also add explanations like &lt;code&gt;nn "Commands to copy foo to bar:"&lt;/code&gt; and then append the appropriate&amp;nbsp;commands. &lt;/p&gt;
&lt;p&gt;Screenshot:
&lt;img alt="screenshot" src="./images/foo-capture.png" /&gt;&lt;/p&gt;
&lt;h2 id="fc-fix-command"&gt;fc - fix command&lt;a class="headerlink" href="#fc-fix-command" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;fc is a little programm to list or edit and re-execute commands from the history list.&amp;nbsp;Read&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;help fc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copyheart:
&lt;a href="http://copyheart.org"&gt;♡&lt;/a&gt;2016 by Parobalth. Copying is an act of love, please&amp;nbsp;share.&lt;/p&gt;</summary><category term="bash"></category><category term="commandline"></category><category term="notes"></category><category term="append"></category><category term="history"></category><category term="fc"></category></entry><entry><title>Soup.io</title><link href="parobalth.github.io/soupio" rel="alternate"></link><updated>2015-09-15T21:45:00+02:00</updated><author><name>Parobalth</name></author><id>tag:,2015-09-15:parobalth.github.io/soupio</id><summary type="html">&lt;p&gt;Recently I started to use soup.io. You can access my microblog at &lt;a class="reference external" href="http://parobalth.soup.io/"&gt;http://parobalth.soup.io/&lt;/a&gt;&lt;/p&gt;
</summary><category term="blogs"></category><category term="soup.io"></category></entry><entry><title>Vim - system clipboard</title><link href="parobalth.github.io/vim-system-clipboard" rel="alternate"></link><updated>2015-09-06T17:18:00+02:00</updated><author><name>Parobalth</name></author><id>tag:,2015-09-06:parobalth.github.io/vim-system-clipboard</id><summary type="html">&lt;p&gt;I finally found a solution to my vim issues with the system clipboard. I just had to install vim-gtk to make &amp;#8220;*p and &amp;#8220;+p work (Debian&amp;nbsp;Wheezy).&lt;/p&gt;
&lt;p&gt;Stackoverflow post:
&lt;a class="reference external" href="http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard"&gt;http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard&lt;/a&gt;&lt;/p&gt;
</summary><category term="vim"></category><category term="clipboard"></category></entry><entry><title>First Post</title><link href="parobalth.github.io/first-post" rel="alternate"></link><updated>2015-09-06T17:55:00+02:00</updated><author><name>Parobalth</name></author><id>tag:,2015-09-06:parobalth.github.io/first-post</id><summary type="html">&lt;p&gt;This is the first post. I managed to set up a pelican powered blog with github user pages. There is still a &lt;em&gt;lot&lt;/em&gt; of testing and learning&amp;nbsp;necessary!&lt;/p&gt;
&lt;p&gt;Useful links and&amp;nbsp;tutorials:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;http://mathamy.com/migrating-to-github-pages-using-pelican.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;http://nafiulis.me/making-a-static-blog-with-pelican.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com/"&gt;https://pages.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.vcheng.org/2014/02/22/migrating-from-wordpress-to-pelican/"&gt;http://www.vcheng.org/2014/02/22/migrating-from-wordpress-to-pelican/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best place to view pelican&amp;nbsp;themes:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pelicanthemes.com"&gt;http://pelicanthemes.com&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>